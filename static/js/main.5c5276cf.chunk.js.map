{"version":3,"sources":["firebase/firebaseInit.js","firebase/database.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","database","writeData","roomId","role","data","successCallback","ref","set","err","console","log","readData","a","get","res","exists","val","Error","RTCConfig","url","ROLES","App","props","clientUpdate","state","dataFromServer","isOffer","host","offer","setState","joinSession","hostUpdate","isAnswer","client","answer","completeHandshake","getPeerConnection","peerConnection","RTCPeerConnection","onaddstream","gotRemoteStream","onicecandidate","gotIceCandidate","oniceconnectionstatechange","onConnectionStatusChange","onsignalingstatechange","event","getMediaStream","callback","navigator","mediaDevices","getDisplayMedia","audio","video","width","height","frameRate","then","stream","localStream","catch","error","JSON","parse","createAnswer","alert","createOffer","localVideo","current","srcObject","muted","addStream","onConnection","handleError","initiateOffer","desc","setLocalDescription","signalData","handleJoin","sigdata","setRemoteDescription","RTCSessionDescription","sendReply","addIceCandidates","trim","roomInput","stringify","clearRoomThenStartSession","isHostReady","startCheckingServerData","updateServerTimer","setInterval","candidate","push","timeOut","clearTimeout","setTimeout","length","input","canArr","i","addIceCandidate","RTCIceCandidate","closeCall","close","pause","remoteVideo","iceConnectionState","clearInterval","handleCall","setRole","renderMain","placeholder","value","onChange","e","target","onClick","disabled","controls","autoPlay","React","createRef","perfArr","lastPerfStamp","this","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c5276cf.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst CONFIG = {\r\n  apiKey: 'AIzaSyBWPLx-DU9ANq9jqe3UsEYgFogpErlZAyw',\r\n  authDomain: 'aristream-87487.firebaseapp.com',\r\n  databaseURL:\r\n    'https://aristream-87487-default-rtdb.europe-west1.firebasedatabase.app',\r\n};\r\n\r\nfirebase.initializeApp(CONFIG);\r\nconst database = firebase.database();\r\n\r\nexport default database;\r\n","import database from './firebaseInit';\r\n\r\nconst writeData = (roomId, role, data, successCallback) => {\r\n  database.ref(`rooms/${roomId}/${role}`).set(\r\n    data,\r\n    (err) => {\r\n      if (!err) {\r\n        successCallback?.();\r\n      }\r\n      console.log(err);\r\n    }\r\n  );\r\n};\r\n\r\nconst clearData = (roomId, successCallback) => {\r\n  database.ref(`rooms/${roomId}`).set({}, (err) => {\r\n    if (!err) {\r\n      successCallback();\r\n    }\r\n    console.log(err);\r\n  })\r\n}\r\n\r\nconst readData = async (roomId) => {\r\n  const res = await database.ref(`rooms/${roomId}`).get();\r\n  if (res.exists()) {\r\n    return res.val();\r\n  }\r\n  throw Error('READ DATA ERROR');\r\n};\r\n\r\nexport { writeData, readData, clearData };\r\n","import React, { Component } from 'react';\nimport {writeData, readData, clearData} from './firebase/database';\nimport './App.css';\n\nconst RTCConfig = {\n  \"iceServers\": [{\n    url: 'stun:stun.l.google.com:19302'\n  }]\n};\n\nconst ROLES = {\n  HOST: 'host',\n  CLIENT: 'client',\n};\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      input: '',\n      role: '',\n      roomInput: '',\n      dataFromServer: {},\n      isOffer: false,\n      isAnswer: false,\n      isHostReady: false,\n    };\n    this.signalData = { \"desc\": null, \"ice\": [] };\n    this.peerConnection = null;\n    this.localVideo = React.createRef(null);\n    this.remoteVideo = React.createRef(null);\n    this.localStream = null;\n    this.perfArr = [];\n    this.lastPerfStamp = 0;\n    this.timeOut = null;\n    this.updateServerTimer = null;\n  }\n\n  clientUpdate = () => {\n    const {dataFromServer, isOffer} = this.state;\n    console.log('GET OFFER', dataFromServer)\n    if (dataFromServer?.host?.offer && !isOffer) {\n      this.setState({isOffer: true});\n      this.joinSession(dataFromServer.host.offer);\n    }\n  }\n\n  hostUpdate = () => {\n    const {dataFromServer, isAnswer} = this.state;\n    if (dataFromServer?.client?.answer && !isAnswer) {\n      this.setState({isAnswer: true});\n      this.completeHandshake(dataFromServer.client.answer);\n    }\n  }\n\n  componentDidUpdate() {\n    const {role, dataFromServer} = this.state;\n    console.log('UPDATESERVER', dataFromServer)\n    if (role === ROLES.CLIENT) {\n      this.clientUpdate();\n    }\n    if (role === ROLES.HOST) {\n      this.hostUpdate();\n    }\n  }\n\n  getPeerConnection = () => {\n    console.log('getPeerConnection')\n    this.peerConnection = new RTCPeerConnection(RTCConfig);\n    this.peerConnection.onaddstream = this.gotRemoteStream;\n    this.peerConnection.onicecandidate = this.gotIceCandidate;\n    this.peerConnection.oniceconnectionstatechange = this.onConnectionStatusChange;\n    this.peerConnection.onsignalingstatechange = (event) => { \n      console.log(\"Signaling change\", event); \n    }\n  }\n\n  getMediaStream = (callback) => {\n    console.log('getMediaStream')\n    navigator.mediaDevices.getDisplayMedia(\n      {\n        audio: true,\n        video: {\n          width: 1920,\n          height: 1080,\n          frameRate: 30,\n\n        }\n      }).then((stream) => {\n        this.localStream = stream;\n        callback(stream);\n      }).catch(function (error) {\n        console.log(\"getUserMedia error: \", error);\n      });\n  }\n\n  joinSession = (data) => {\n    console.log('joinSession');\n    if (this.peerConnection == null) {\n      this.getPeerConnection();\n    }\n\n    const sigdata = JSON.parse(data);\n    if (sigdata[\"desc\"] === \"\") {\n      alert(\"Please enter the offer\");\n      return;\n    }\n\n    this.createAnswer(data);\n  }\n\n  createOffer = (stream) => {\n    console.log('create offer');\n    this.localVideo.current.srcObject = stream;\n    this.localVideo.current.muted = true;\n    this.peerConnection.addStream(stream);\n    this.peerConnection.createOffer(this.onConnection, this.handleError);\n  }\n\n  initiateOffer = () => {\n    console.log('initiateOffer')\n    if (this.peerConnection == null) {\n      this.getPeerConnection();\n    }\n    this.getMediaStream(this.createOffer);\n  }\n\n  onConnection = (desc) => {\n    console.log(\"Description is \", desc);\n    this.peerConnection.setLocalDescription(desc);\n    this.signalData[\"desc\"] = desc;\n    //Change the event on click of Join Button to Complete Handshake on Initiator Side\n    this.handleJoin = () => {\n      this.completeHandshake();\n    }\n  }\n\n  createAnswer = (data) => {\n    console.log('create answer');\n    const sigdata = JSON.parse(data);\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(sigdata[\"desc\"]), function () { console.log(\"Success\"); }, this.handleError);\n    this.peerConnection.createAnswer(this.sendReply, this.handleError);\n    this.addIceCandidates(sigdata[\"ice\"]);\n  }\n\n  completeHandshake = (data) => {\n    console.log(\"Inside complete handshake\");\n    let sigdata = data.trim();\n    sigdata = JSON.parse(sigdata);\n    if (!sigdata[\"desc\"]) {\n      alert(\"Please enter the answer\");\n      return;\n    }\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(sigdata[\"desc\"]), function () { console.log(\"Success\"); }, this.handleError);\n    this.addIceCandidates(sigdata[\"ice\"]);\n  }\n\n  sendReply = (desc) => {\n    const {roomInput} = this.state;\n    console.log('send reply');\n    this.peerConnection.setLocalDescription(desc);\n    this.signalData[\"desc\"] = desc;\n    writeData(roomInput, ROLES.CLIENT, {\n      answer: JSON.stringify(this.signalData),\n    })\n  }\n\n  clearRoomThenStartSession = () => {\n    const {roomInput, role} = this.state;\n\n    clearData(roomInput, async () => {\n      writeData(\n        roomInput,\n        role,\n        {offer: JSON.stringify(this.signalData)},\n        () => {\n          this.setState({isHostReady: true});\n          this.startCheckingServerData();\n        });\n    })\n  }\n\n  startCheckingServerData = () => {\n    const {roomInput} = this.state;\n\n    this.updateServerTimer = setInterval(async () => {\n      const res = await readData(roomInput);\n      this.setState({dataFromServer: res});\n    }, 1000);\n  }\n\n  gotIceCandidate = (event) => {\n    const {roomInput, role} = this.state;\n    console.log('gotIceCandidate', event);\n    if (event.candidate) {\n      this.signalData[\"ice\"].push(event.candidate);\n      if (this.timeOut !== null) {\n        clearTimeout(this.timeOut)\n      }\n      this.timeOut = setTimeout(() => {\n        if (roomInput.length > 0) {\n          if (role === ROLES.HOST) {\n            this.clearRoomThenStartSession();\n          }\n          this.setState({input: JSON.stringify(this.signalData)})\n        }\n      }, 700);\n    }\n  }\n\n  addIceCandidates = (canArr) => {\n    console.log('add ice candidates', canArr);\n    for (var i in canArr) {\n      this.peerConnection.addIceCandidate(new RTCIceCandidate(canArr[i]));\n    }\n  }\n\n  handleError = (err) => {\n    console.log(\"Error occured \" + err);\n  }\n\n\n  closeCall = () => {\n    console.log('close call');\n    this.peerConnection.close();\n    //peerConnection=null;\n\n    // txtBox.popover('hide');\n    // txtBox.val('');\n    this.localVideo.current.pause();\n    this.remoteVideo.current.pause();\n    this.localStream = null;\n    // $(localVideo).hide();\n    // showModal();\n  }\n\n  onConnectionStatusChange = (event) => {\n    switch (this.peerConnection.iceConnectionState) {\n      case 'checking':\n        console.log('Connecting to peer...');\n        break;\n      case 'connected': // on caller side\n        console.log('Connection established.');\n        clearInterval(this.updateServerTimer);\n        this.updateServerTimer = null;\n        break;\n      case 'disconnected':\n        console.log('Disconnected.');\n        this.closeCall();\n        break;\n      case 'failed':\n        console.log('Failed.');\n        break;\n      case 'closed':\n        console.log('Connection closed.');\n        this.peerConnection = null;\n        this.handleJoin = () => {\n          this.joinSession();\n        }\n        break;\n      default:\n        console.log('sdfsfdsfsdfsdf')\n    }\n  }\n\n  gotRemoteStream = (event) => {\n    console.log(\"Received remote stream\");\n    this.remoteVideo.current.srcObject = event.stream;\n  }\n\n  handleCall = () => {\n    const {roomInput} = this.state;\n    if (roomInput.length > 0) {\n      this.initiateOffer();\n    } else {\n      alert('ENTER ROOM ID')\n    }\n  }\n\n  handleJoin = () => {\n    const {roomInput} = this.state;\n    if (roomInput.length > 0) {\n      this.startCheckingServerData();\n    } else {\n      alert('ENTER ROOM ID')\n    }\n  }\n\n  setRole = (role) => {\n    this.setState({role});\n  }\n\n  renderMain = () => {\n    const {role, roomInput, isHostReady} = this.state;\n    if (role !== '') {\n      return (\n        <>\n          <input\n            placeholder='ROOM ID'\n            value={roomInput}\n            onChange={(e) => this.setState({roomInput: e.target.value})}\n          />\n          {role === ROLES.HOST && (\n            <div>\n              <button onClick={this.handleCall} disabled={isHostReady}>\n                {!isHostReady ? 'call' : \"HOST READY\"}\n              </button>\n              <div>\n                <video\n                  controls\n                  autoPlay\n                  ref={this.localVideo}\n                  width={300}\n                  height={300}\n                />\n              </div>\n            </div>\n          )}\n          {role === ROLES.CLIENT && (\n            <div>\n              <button onClick={this.handleJoin}>\n                join\n              </button>\n              <div>\n                <video\n                  controls\n                  autoPlay\n                  ref={this.remoteVideo}\n                  width={300}\n                  height={300}\n                />\n              </div>\n            </div>\n          )}\n        </>\n      )\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"button\" onClick={() => this.setRole(ROLES.HOST)}>\n          Host\n        </button>\n        <button className=\"button\" onClick={() => this.setRole(ROLES.CLIENT)}>\n          Client\n        </button>\n        {this.renderMain()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}