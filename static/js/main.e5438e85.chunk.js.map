{"version":3,"sources":["firebase/firebaseInit.js","firebase/database.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","database","writeData","roomId","role","data","successCallback","ref","set","err","console","log","readData","a","get","res","exists","val","Error","RTCConfig","url","ROLES","App","props","clientUpdate","state","dataFromServer","isOffer","host","offer","setState","joinSession","hostUpdate","isAnswer","client","answer","completeHandshake","getPeerConnection","peerConnection","RTCPeerConnection","onaddstream","gotRemoteStream","ondatachannel","ev","channel","onopen","onmessage","onicecandidate","gotIceCandidate","oniceconnectionstatechange","onConnectionStatusChange","onsignalingstatechange","event","getMediaStream","callback","navigator","mediaDevices","getDisplayMedia","audio","video","width","height","frameRate","then","stream","localStream","catch","error","JSON","parse","createAnswer","alert","createOffer","localVideo","current","srcObject","muted","addStream","createDataChannel","onConnection","handleError","initiateOffer","desc","setLocalDescription","signalData","handleJoin","sigdata","setRemoteDescription","RTCSessionDescription","sendReply","addIceCandidates","trim","roomInput","stringify","clearRoomThenStartSession","isHostReady","startCheckingServerData","updateServerTimer","setInterval","candidate","push","timeOut","clearTimeout","setTimeout","length","input","canArr","i","addIceCandidate","RTCIceCandidate","closeCall","close","pause","remoteVideo","iceConnectionState","clearInterval","handleCall","setRole","renderMain","placeholder","value","onChange","e","target","onClick","disabled","send","controls","autoPlay","React","createRef","perfArr","lastPerfStamp","this","className","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5438e85.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst CONFIG = {\r\n  apiKey: 'AIzaSyBWPLx-DU9ANq9jqe3UsEYgFogpErlZAyw',\r\n  authDomain: 'aristream-87487.firebaseapp.com',\r\n  databaseURL:\r\n    'https://aristream-87487-default-rtdb.europe-west1.firebasedatabase.app',\r\n};\r\n\r\nfirebase.initializeApp(CONFIG);\r\nconst database = firebase.database();\r\n\r\nexport default database;\r\n","import database from './firebaseInit';\r\n\r\nconst writeData = (roomId, role, data, successCallback) => {\r\n  database.ref(`rooms/${roomId}/${role}`).set(\r\n    data,\r\n    (err) => {\r\n      if (!err) {\r\n        successCallback?.();\r\n      }\r\n      console.log(err);\r\n    }\r\n  );\r\n};\r\n\r\nconst clearData = (roomId, successCallback) => {\r\n  database.ref(`rooms/${roomId}`).set({}, (err) => {\r\n    if (!err) {\r\n      successCallback();\r\n    }\r\n    console.log(err);\r\n  })\r\n}\r\n\r\nconst readData = async (roomId) => {\r\n  const res = await database.ref(`rooms/${roomId}`).get();\r\n  if (res.exists()) {\r\n    return res.val();\r\n  }\r\n  throw Error('READ DATA ERROR');\r\n};\r\n\r\nexport { writeData, readData, clearData };\r\n","import React, { Component } from 'react';\r\nimport {writeData, readData, clearData} from './firebase/database';\r\nimport './App.css';\r\n\r\nconst RTCConfig = {\r\n  \"iceServers\": [{\r\n    url: 'stun:stun.l.google.com:19302'\r\n  }]\r\n};\r\n\r\nconst ROLES = {\r\n  HOST: 'host',\r\n  CLIENT: 'client',\r\n};\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      input: '',\r\n      role: '',\r\n      roomInput: '',\r\n      dataFromServer: {},\r\n      isOffer: false,\r\n      isAnswer: false,\r\n      isHostReady: false,\r\n    };\r\n    this.signalData = { \"desc\": null, \"ice\": [] };\r\n    this.peerConnection = null;\r\n    this.localVideo = React.createRef(null);\r\n    this.remoteVideo = React.createRef(null);\r\n    this.localStream = null;\r\n    this.perfArr = [];\r\n    this.lastPerfStamp = 0;\r\n    this.timeOut = null;\r\n    this.updateServerTimer = null;\r\n    this.channel = null;\r\n  }\r\n\r\n  clientUpdate = () => {\r\n    const {dataFromServer, isOffer} = this.state;\r\n    console.log('GET OFFER', dataFromServer)\r\n    if (dataFromServer?.host?.offer && !isOffer) {\r\n      this.setState({isOffer: true});\r\n      this.joinSession(dataFromServer.host.offer);\r\n    }\r\n  }\r\n\r\n  hostUpdate = () => {\r\n    const {dataFromServer, isAnswer} = this.state;\r\n    if (dataFromServer?.client?.answer && !isAnswer) {\r\n      this.setState({isAnswer: true});\r\n      this.completeHandshake(dataFromServer.client.answer);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const {role, dataFromServer} = this.state;\r\n    console.log('UPDATESERVER', dataFromServer)\r\n    if (role === ROLES.CLIENT) {\r\n      this.clientUpdate();\r\n    }\r\n    if (role === ROLES.HOST) {\r\n      this.hostUpdate();\r\n    }\r\n  }\r\n\r\n  getPeerConnection = () => {\r\n    console.log('getPeerConnection')\r\n    this.peerConnection = new RTCPeerConnection(RTCConfig);\r\n    this.peerConnection.onaddstream = this.gotRemoteStream;\r\n    this.peerConnection.ondatachannel = (ev) => {\r\n      this.channel = ev.channel;\r\n      this.channel.onopen = (ev) => {\r\n        console.log('OPEN');\r\n        this.channel.onmessage = (ev) => {\r\n          console.log('MESSAGE', ev.data);\r\n        }\r\n      }\r\n    }\r\n    this.peerConnection.onicecandidate = this.gotIceCandidate;\r\n    this.peerConnection.oniceconnectionstatechange = this.onConnectionStatusChange;\r\n    this.peerConnection.onsignalingstatechange = (event) => { \r\n      console.log(\"Signaling change\", event); \r\n    }\r\n  }\r\n\r\n  getMediaStream = (callback) => {\r\n    console.log('getMediaStream')\r\n    navigator.mediaDevices.getDisplayMedia(\r\n      {\r\n        audio: true,\r\n        video: {\r\n          width: 1920,\r\n          height: 1080,\r\n          frameRate: 30,\r\n\r\n        }\r\n      }).then((stream) => {\r\n        this.localStream = stream;\r\n        callback(stream);\r\n      }).catch(function (error) {\r\n        console.log(\"getUserMedia error: \", error);\r\n      });\r\n  }\r\n\r\n  joinSession = (data) => {\r\n    console.log('joinSession');\r\n    if (this.peerConnection == null) {\r\n      this.getPeerConnection();\r\n    }\r\n\r\n    const sigdata = JSON.parse(data);\r\n    if (sigdata[\"desc\"] === \"\") {\r\n      alert(\"Please enter the offer\");\r\n      return;\r\n    }\r\n\r\n    this.createAnswer(data);\r\n  }\r\n\r\n  createOffer = (stream) => {\r\n    console.log('create offer');\r\n    this.localVideo.current.srcObject = stream;\r\n    this.localVideo.current.muted = true;\r\n    this.peerConnection.addStream(stream);\r\n    this.peerConnection.createDataChannel('chat');\r\n    this.peerConnection.createOffer(this.onConnection, this.handleError);\r\n  }\r\n\r\n  initiateOffer = () => {\r\n    console.log('initiateOffer')\r\n    if (this.peerConnection == null) {\r\n      this.getPeerConnection();\r\n    }\r\n    this.getMediaStream(this.createOffer);\r\n  }\r\n\r\n  onConnection = (desc) => {\r\n    console.log(\"Description is \", desc);\r\n    this.peerConnection.setLocalDescription(desc);\r\n    this.signalData[\"desc\"] = desc;\r\n    //Change the event on click of Join Button to Complete Handshake on Initiator Side\r\n    this.handleJoin = () => {\r\n      this.completeHandshake();\r\n    }\r\n  }\r\n\r\n  createAnswer = (data) => {\r\n    console.log('create answer');\r\n    const sigdata = JSON.parse(data);\r\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(sigdata[\"desc\"]), function () { console.log(\"Success\"); }, this.handleError);\r\n    this.peerConnection.createAnswer(this.sendReply, this.handleError);\r\n    this.addIceCandidates(sigdata[\"ice\"]);\r\n  }\r\n\r\n  completeHandshake = (data) => {\r\n    console.log(\"Inside complete handshake\");\r\n    let sigdata = data.trim();\r\n    sigdata = JSON.parse(sigdata);\r\n    if (!sigdata[\"desc\"]) {\r\n      alert(\"Please enter the answer\");\r\n      return;\r\n    }\r\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(sigdata[\"desc\"]), function () { console.log(\"Success\"); }, this.handleError);\r\n    this.addIceCandidates(sigdata[\"ice\"]);\r\n  }\r\n\r\n  sendReply = (desc) => {\r\n    const {roomInput} = this.state;\r\n    console.log('send reply');\r\n    this.peerConnection.setLocalDescription(desc);\r\n    this.signalData[\"desc\"] = desc;\r\n    writeData(roomInput, ROLES.CLIENT, {\r\n      answer: JSON.stringify(this.signalData),\r\n    })\r\n  }\r\n\r\n  clearRoomThenStartSession = () => {\r\n    const {roomInput, role} = this.state;\r\n\r\n    clearData(roomInput, async () => {\r\n      writeData(\r\n        roomInput,\r\n        role,\r\n        {offer: JSON.stringify(this.signalData)},\r\n        () => {\r\n          this.setState({isHostReady: true});\r\n          this.startCheckingServerData();\r\n        });\r\n    })\r\n  }\r\n\r\n  startCheckingServerData = () => {\r\n    const {roomInput} = this.state;\r\n\r\n    this.updateServerTimer = setInterval(async () => {\r\n      const res = await readData(roomInput);\r\n      this.setState({dataFromServer: res});\r\n    }, 1000);\r\n  }\r\n\r\n  gotIceCandidate = (event) => {\r\n    const {roomInput, role} = this.state;\r\n    console.log('gotIceCandidate', event);\r\n    if (event.candidate) {\r\n      this.signalData[\"ice\"].push(event.candidate);\r\n      if (this.timeOut !== null) {\r\n        clearTimeout(this.timeOut)\r\n      }\r\n      this.timeOut = setTimeout(() => {\r\n        if (roomInput.length > 0) {\r\n          if (role === ROLES.HOST) {\r\n            this.clearRoomThenStartSession();\r\n          }\r\n          this.setState({input: JSON.stringify(this.signalData)})\r\n        }\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  addIceCandidates = (canArr) => {\r\n    console.log('add ice candidates', canArr);\r\n    for (var i in canArr) {\r\n      this.peerConnection.addIceCandidate(new RTCIceCandidate(canArr[i]));\r\n    }\r\n  }\r\n\r\n  handleError = (err) => {\r\n    console.log(\"Error occured \" + err);\r\n  }\r\n\r\n\r\n  closeCall = () => {\r\n    console.log('close call');\r\n    this.peerConnection.close();\r\n    //peerConnection=null;\r\n\r\n    // txtBox.popover('hide');\r\n    // txtBox.val('');\r\n    this.localVideo.current.pause();\r\n    this.remoteVideo.current.pause();\r\n    this.localStream = null;\r\n    // $(localVideo).hide();\r\n    // showModal();\r\n  }\r\n\r\n  onConnectionStatusChange = (event) => {\r\n    switch (this.peerConnection.iceConnectionState) {\r\n      case 'checking':\r\n        console.log('Connecting to peer...');\r\n        break;\r\n      case 'connected': // on caller side\r\n        console.log('Connection established.');\r\n        clearInterval(this.updateServerTimer);\r\n        this.updateServerTimer = null;\r\n        break;\r\n      case 'disconnected':\r\n        console.log('Disconnected.');\r\n        this.closeCall();\r\n        break;\r\n      case 'failed':\r\n        console.log('Failed.');\r\n        break;\r\n      case 'closed':\r\n        console.log('Connection closed.');\r\n        this.peerConnection = null;\r\n        this.handleJoin = () => {\r\n          this.joinSession();\r\n        }\r\n        break;\r\n      default:\r\n        console.log('sdfsfdsfsdfsdf')\r\n    }\r\n  }\r\n\r\n  gotRemoteStream = (event) => {\r\n    console.log(\"Received remote stream\");\r\n    this.remoteVideo.current.srcObject = event.stream;\r\n  }\r\n\r\n  handleCall = () => {\r\n    const {roomInput} = this.state;\r\n    if (roomInput.length > 0) {\r\n      this.initiateOffer();\r\n    } else {\r\n      alert('ENTER ROOM ID')\r\n    }\r\n  }\r\n\r\n  handleJoin = () => {\r\n    const {roomInput} = this.state;\r\n    if (roomInput.length > 0) {\r\n      this.startCheckingServerData();\r\n    } else {\r\n      alert('ENTER ROOM ID')\r\n    }\r\n  }\r\n\r\n  setRole = (role) => {\r\n    this.setState({role});\r\n  }\r\n\r\n  renderMain = () => {\r\n    const {role, roomInput, isHostReady} = this.state;\r\n    if (role !== '') {\r\n      return (\r\n        <>\r\n          <input\r\n            placeholder='ROOM ID'\r\n            value={roomInput}\r\n            onChange={(e) => this.setState({roomInput: e.target.value})}\r\n          />\r\n          {role === ROLES.HOST && (\r\n            <div>\r\n              <button onClick={this.handleCall} disabled={isHostReady}>\r\n                {!isHostReady ? 'call' : \"HOST READY\"}\r\n              </button>\r\n              <button onClick={this.channel?.send(`message from HOST`)}>\r\n                send check\r\n              </button>\r\n              <div>\r\n                <video\r\n                  controls\r\n                  autoPlay\r\n                  ref={this.localVideo}\r\n                  width={300}\r\n                  height={300}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          {role === ROLES.CLIENT && (\r\n            <div>\r\n              <button onClick={this.handleJoin}>\r\n                join\r\n              </button>\r\n              <button onClick={this.channel?.send(`message from CLIENT`)}>\r\n                send check\r\n              </button>\r\n              <div>\r\n                <video\r\n                  controls\r\n                  autoPlay\r\n                  ref={this.remoteVideo}\r\n                  width={300}\r\n                  height={300}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button className=\"button\" onClick={() => this.setRole(ROLES.HOST)}>\r\n          Host\r\n        </button>\r\n        <button className=\"button\" onClick={() => this.setRole(ROLES.CLIENT)}>\r\n          Client\r\n        </button>\r\n        {this.renderMain()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}